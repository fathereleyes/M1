# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1 

commands:
  install_awscli:
    description: Install aws cli v2
    steps:
      - run: 
          name: Install aws cli 
          command: |
              sudo apt update 
              sudo apt-get install awscli
              sudo apt-get update
              # sudo pip install awscli
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get install zip
              sudo apt-get install unzip
              sudo apt install vim
              sudo unzip awscliv2.zip
              sudo ./aws/install 
              sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
  install_ansible:
    description: install ansible 
    steps:
      - run: 
          name: install ansible f
          command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>    
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  # jobs:
  build-frontend:
    docker:
#- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          #keys: [frontend-build]
          keys: [frontend-build-depend]
      - run:
          # name: Build front-end
          # command: |
          #   # Your code here
          #   exit 1
          
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
                
          
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build

      - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build-depend
            ##
      

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            # Your code here
  #            exit 1
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - run:
          name: Back-end build
          command: |
            cd frontend
            npm install 
            npm run build
              
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-depend
  
#**********************************


#   test-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
                
#   test-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here



#*****************************************
  test-frontend:
    docker:
      - image: cimg/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-depend]
      - run:
          name: front-end-unit-test
          command: |
            cd frontend
            npm install 
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - run:
          name: Back-end unit-test
          command: |
            cd backend
            npm install 
            npm run test
#***********************************
            
#   scan-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   scan-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#*******************************

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [front-build-depend]
     - run:
          name: front-end scan
          command: |
            cd frontend
            npm install 
            npm audit fix --force --audit-level=critical
            npm audit fix
            npm audit --audit-level=critical
  
  scan-backend:    
    docker:
      - image: cimg/node:13.8.0
           
    steps:
     - checkout
     - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
    #  - restore_cache:
    #       keys: [backend-build-depend]
     - run:
          name: Back-end scan
          command: |
              cd backend
              npm install 
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit fix
              npm audit fix
              npm audit fix
   #  #         # npm audit --audit-level=critical

   #****************************************************
  

  deploy-infrastructure:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      # - run : 
      #     name: install_awscli
      #     command: |
      #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #         unzip awscliv2.zip
      #         sudo ./aws/install 
      - run : 
            name: Ensure back-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run :
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                #exit 1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt        
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt   


    # destroy-environment-2: 

    #   - run:
    #       name: destorey stacks 
    #       command: |
    #         - destroy-environment
       

      #   # #Here's where you will add some code to rollback on failure
  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   parameters:
  #     Workflow_ID:
  #       type: string
  #       default: ${CIRCLE_WORKFLOW_ID:0:7}
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           # Empty frontend bucket
  #           aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

  #           # Delete frontend stack
  #           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  #           # Delete backend stack
  #           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>      




#********************************************************************
#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure  













#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]git         











# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows

        
## commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
# jobs:
  build-frontend:
    docker:
#- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          #keys: [frontend-build]
          keys: [frontend-build-depend]
      - run:
          # name: Build front-end
          # command: |
          #   # Your code here
          #   exit 1
          
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
                
          
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build

      - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build-depend
            ##
      

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            # Your code here
  #            exit 1
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - run:
          name: Back-end build
          command: |
            cd frontend
            npm install 
            npm run build
              
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-depend
  
#**********************************


#   test-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
                
#   test-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here



#*****************************************
  test-frontend:
    docker:
      - image: cimg/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-depend]
      - run:
          name: front-end-unit-test
          command: |
            cd frontend
            npm install 
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - run:
          name: Back-end unit-test
          command: |
            cd backend
            npm install 
            npm run test
#***********************************
            
#   scan-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   scan-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#*******************************

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [front-build-depend]
     - run:
          name: front-end scan
          command: |
            cd frontend
            npm install 
            npm audit fix --force --audit-level=critical
            npm audit fix
            npm audit --audit-level=critical
  
  scan-backend:    
    docker:
      - image: cimg/node:13.8.0
           
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
    #  - restore_cache:
    #       keys: [backend-build-depend]
     - run:
          name: Back-end scan
          command: |
              cd backend
              npm install 
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit fix
              npm audit fix
              npm audit fix
   #  #         # npm audit --audit-level=critical

   #****************************************************
  

  deploy-infrastructure:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      # - run : 
      #     name: install_awscli
      #     command: |
      #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #         unzip awscliv2.zip
      #         sudo ./aws/install 
      - run : 
            name: Ensure back-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run :
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                #exit 1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt        
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt   


    # destroy-environment-2: 

    #   - run:
    #       name: destorey stacks 
    #       command: |
    #         - destroy-environment
       

      #   # #Here's where you will add some code to rollback on failure
  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   parameters:
  #     Workflow_ID:
  #       type: string
  #       default: ${CIRCLE_WORKFLOW_ID:0:7}
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           # Empty frontend bucket
  #           aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

  #           # Delete frontend stack
  #           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  #           # Delete backend stack
  #           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>      




#********************************************************************
#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure  













#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
workflows:
    say-hello-workflow:
    jobs:
      - say-hello
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]